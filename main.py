# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'converter.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMainWindow


class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, -1, 801, 551))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.plainTextEditBefore = QtWidgets.QPlainTextEdit(self.verticalLayoutWidget)
        self.plainTextEditBefore.setObjectName("plainTextEditBefore")
        self.horizontalLayout.addWidget(self.plainTextEditBefore)
        self.plainTextEditAfter = QtWidgets.QPlainTextEdit(self.verticalLayoutWidget)
        self.plainTextEditAfter.setObjectName("plainTextEditAfter")
        self.horizontalLayout.addWidget(self.plainTextEditAfter)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.startDotBox = QtWidgets.QComboBox(self.verticalLayoutWidget)
        self.startDotBox.setEditable(False)
        self.startDotBox.setCurrentText("")
        self.startDotBox.setObjectName("startDotBox")
        self.startDotBox.sizePolicy = QtWidgets.QSizePolicy.Expanding
        self.verticalLayout.addWidget(self.startDotBox)
        self.convertButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.convertButton.setObjectName("convertButton")
        self.verticalLayout.addWidget(self.convertButton)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionSave)
        self.menubar.addAction(self.menuFile.menuAction())

        self.actionOpen.triggered.connect(lambda: self.action_clicked(self.actionOpen.text()))
        self.actionSave.triggered.connect(lambda: self.action_clicked(self.actionSave.text()))

        try:
            fbase = open("base.txt", "r")
            base_text = fbase.readlines()
            fbase.close()
        except FileNotFoundError:
            self.plainTextEditAfter.setPlainText("base.txt файл не найден!")

        start_point, base, tools = self.parse_fbase(base_text)

        # print(start_point)
        # print(base)
        # print(tools)

        self.startDotBox.addItems(base)

        self.retranslateUi(MainWindow)
        self.startDotBox.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.convertButton.clicked.connect(lambda: self.convert_file(
            ''.join(self.plainTextEditBefore.toPlainText()), start_point, self.startDotBox.currentText(), tools))

    def parse_fbase(self, text):
        start_point = ""
        base = []
        tools = {}

        # print(text)

        option = ""
        name = ""
        for line in text:
            # print(line)
            if not line or line == "\n":
                continue
            if line in ["START\n", "BASE\n", "TOOLS\n"]:
                option = line
                continue
            elif line == "END":
                break

            if option == "START\n":
                start_point = line
            elif option == "BASE\n":
                base.append(line[:-1])
            elif option == "TOOLS\n":
                if line[0] == "T":
                    name = line[0:2]
                elif line[0] == "F":
                    tools[name] = line

        # print(start_point)
        # print(base)
        # print(tools)

        return start_point, base, tools

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Converter"))
        self.convertButton.setText(_translate("MainWindow", "Конвертировать"))
        self.menuFile.setTitle(_translate("MainWindow", "Файл"))
        self.actionOpen.setText(_translate("MainWindow", "Открыть"))
        self.actionSave.setText(_translate("MainWindow", "Сохранить"))

    def convert_file(self, text, start_point, start_dot, tools):
        try:
            start_info = ("\n"
                          "T1-0.8MM\n"
                          "T2-0.9MM\n"
                          "T3-1.0MM\n"
                          "T4-1.2MM\n"
                          "T5-1.4MM\n"
                          "T6-1.6MM\n"
                          "T7-2.0MM\n"
                          "T8-3.0MM\n"
                          "T9-2.0MM FREZA\n"
                          "%\n")

            converted_text = self.file_name
            converted_text += start_info
            converted_text += start_point

            m_replace = {
                "M15\n": "G98",
                "M16\n": "G99\n",
                "M30\n": "M02\n",
                "M30": "M02\n",
            }

            t5 = False
            block = ""
            prev = ""
            percent = False
            for line in self.get_lines(text):
                # print(line)
                if line == "%\n":
                    percent = True
                    continue
                if not percent:
                    continue
                elif line[0] == "T":
                    if t5:
                        converted_text += "\n" + block
                        t5 = False
                        block = ""

                    if line[0:3] == "T05":
                        t5 = True
                        block = ""

                    tool = line[0] + line[2]
                    converted_text += "\n" + tool + "\n"
                    if tool != "T0":
                        converted_text += tools[tool]
                elif line in m_replace:
                    if (line == "M30\n" or line == "T05\n") and t5:
                        converted_text += "\n" + block
                        block = ""
                        t5 = False
                    block += m_replace[line]
                    converted_text += m_replace[line]
                    if line == "M15\n":
                        block += prev
                        converted_text += prev
                else:
                    prev = line
                    block += line
                    converted_text += line

            converted_text += "E0" + start_dot
            self.plainTextEditAfter.setPlainText(converted_text)
        except:
            self.plainTextEditAfter.setPlainText("Что-то пошло не так, скорее всего загружен файл с расширением "
                                                 "отличным от .drl")

    def get_lines(self, text):
        lines = []
        line = ""
        for char in text:
            line += char
            if char == "\n":
                lines.append(line)
                line = ""
        return lines

    def action_clicked(self, text):
        if text == "Открыть":
            fname = QFileDialog.getOpenFileName(self)[0]
            self.file_name = self.get_name(fname)
            try:
                with open(fname, 'r') as f:
                    data = f.read()
                    self.plainTextEditBefore.setPlainText(data)
            except FileNotFoundError:
                print("No such file")
        elif text == "Сохранить":
            fname = QFileDialog.getSaveFileName(self, "Saving", self.file_name, "(*.prg)")[0]
            try:
                text_to_save = self.plainTextEditAfter.toPlainText()
                with open(fname, 'w') as f:
                    f.write(text_to_save)
            except FileNotFoundError:
                print("No such file")

    def get_name(self, name):
        parsed_name = ""
        for char in name:
            if char in "/\\":
                parsed_name = ""
            else:
                parsed_name += char
        parsed_name = parsed_name[:-3] + "prg"
        dir_path = name[:-len(parsed_name)]
        # print(dir_path)
        file_path = os.path.join(dir_path, parsed_name)
        return file_path


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
